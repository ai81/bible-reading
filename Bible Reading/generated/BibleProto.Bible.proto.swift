/// Generated by the Protocol Buffers 3.4.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.22
/// Source file "bible.proto"
/// Syntax "Proto2"

import Foundation
import ProtocolBuffers


public struct BibleProto { }

public extension BibleProto {
    public struct BibleRoot {
        public static let `default` = BibleRoot()
        public var extensionRegistry:ExtensionRegistry

        init() {
            extensionRegistry = ExtensionRegistry()
            registerAllExtensions(registry: extensionRegistry)
        }
        public func registerAllExtensions(registry: ExtensionRegistry) {
        }
    }

    final public class BibleMessage : GeneratedMessage {
        public typealias BuilderType = BibleProto.BibleMessage.Builder

        public static func == (lhs: BibleProto.BibleMessage, rhs: BibleProto.BibleMessage) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
            fieldCheck = fieldCheck && (lhs.books == rhs.books)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var version:Int32! = nil
        public fileprivate(set) var hasVersion:Bool = false

        public fileprivate(set) var books:Array<BibleProto.BookMessage>  = Array<BibleProto.BookMessage>()
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            if !hasVersion {
                return false
            }
            var isInitBooks:Bool = true
            for oneElementBooks in books {
                if !oneElementBooks.isInitialized() {
                    isInitBooks = false
                    break 
                }
            }
            if !isInitBooks {
                return isInitBooks
            }
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasVersion {
                try codedOutputStream.writeInt32(fieldNumber: 1, value:version)
            }
            for oneElementBooks in books {
                  try codedOutputStream.writeMessage(fieldNumber: 2, value:oneElementBooks)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasVersion {
                serialize_size += version.computeInt32Size(fieldNumber: 1)
            }
            for oneElementBooks in books {
                serialize_size += oneElementBooks.computeMessageSize(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> BibleProto.BibleMessage.Builder {
            return BibleProto.BibleMessage.classBuilder() as! BibleProto.BibleMessage.Builder
        }
        public func getBuilder() -> BibleProto.BibleMessage.Builder {
            return classBuilder() as! BibleProto.BibleMessage.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return BibleProto.BibleMessage.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return BibleProto.BibleMessage.Builder()
        }
        public func toBuilder() throws -> BibleProto.BibleMessage.Builder {
            return try BibleProto.BibleMessage.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:BibleProto.BibleMessage) throws -> BibleProto.BibleMessage.Builder {
            return try BibleProto.BibleMessage.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasVersion {
                jsonMap["version"] = Int(version)
            }
            if !books.isEmpty {
                var jsonArrayBooks:Array<Dictionary<String,Any>> = []
                for oneValueBooks in books {
                    let ecodedMessageBooks = try oneValueBooks.encode()
                    jsonArrayBooks.append(ecodedMessageBooks)
                }
                jsonMap["books"] = jsonArrayBooks
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> BibleProto.BibleMessage {
            return try BibleProto.BibleMessage.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> BibleProto.BibleMessage {
            return try BibleProto.BibleMessage.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasVersion {
                output += "\(indent) version: \(version) \n"
            }
            var booksElementIndex:Int = 0
            for oneElementBooks in books {
                output += "\(indent) books[\(booksElementIndex)] {\n"
                output += try oneElementBooks.getDescription(indent: "\(indent)  ")
                output += "\(indent)}\n"
                booksElementIndex += 1
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasVersion {
                    hashCode = (hashCode &* 31) &+ version.hashValue
                }
                for oneElementBooks in books {
                    hashCode = (hashCode &* 31) &+ oneElementBooks.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "BibleProto.BibleMessage"
        }
        override public func className() -> String {
            return "BibleProto.BibleMessage"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:BibleProto.BibleMessage = BibleProto.BibleMessage()
            public func getMessage() -> BibleProto.BibleMessage {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var version:Int32 {
                get {
                    return builderResult.version
                }
                set (value) {
                    builderResult.hasVersion = true
                    builderResult.version = value
                }
            }
            public var hasVersion:Bool {
                get {
                    return builderResult.hasVersion
                }
            }
            @discardableResult
            public func setVersion(_ value:Int32) -> BibleProto.BibleMessage.Builder {
                self.version = value
                return self
            }
            @discardableResult
            public func clearVersion() -> BibleProto.BibleMessage.Builder{
                builderResult.hasVersion = false
                builderResult.version = nil
                return self
            }
            public var books:Array<BibleProto.BookMessage> {
                get {
                    return builderResult.books
                }
                set (value) {
                    builderResult.books = value
                }
            }
            @discardableResult
            public func setBooks(_ value:Array<BibleProto.BookMessage>) -> BibleProto.BibleMessage.Builder {
                self.books = value
                return self
            }
            @discardableResult
            public func clearBooks() -> BibleProto.BibleMessage.Builder {
                builderResult.books.removeAll(keepingCapacity: false)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> BibleProto.BibleMessage.Builder {
                builderResult = BibleProto.BibleMessage()
                return self
            }
            override public func clone() throws -> BibleProto.BibleMessage.Builder {
                return try BibleProto.BibleMessage.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> BibleProto.BibleMessage {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> BibleProto.BibleMessage {
                let returnMe:BibleProto.BibleMessage = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:BibleProto.BibleMessage) throws -> BibleProto.BibleMessage.Builder {
                if other == BibleProto.BibleMessage() {
                    return self
                }
                if other.hasVersion {
                    version = other.version
                }
                if !other.books.isEmpty  {
                     builderResult.books += other.books
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> BibleProto.BibleMessage.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> BibleProto.BibleMessage.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        version = try codedInputStream.readInt32()

                    case 18:
                        let subBuilder = BibleProto.BookMessage.Builder()
                        try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                        books.append(subBuilder.buildPartial())

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> BibleProto.BibleMessage.Builder {
                let resultDecodedBuilder = BibleProto.BibleMessage.Builder()
                if let jsonValueVersion = jsonMap["version"] as? Int {
                    resultDecodedBuilder.version = Int32(jsonValueVersion)
                } else if let jsonValueVersion = jsonMap["version"] as? String {
                    resultDecodedBuilder.version = Int32(jsonValueVersion)!
                }
                if let jsonValueBooks = jsonMap["books"] as? Array<Dictionary<String,Any>> {
                    var jsonArrayBooks:Array<BibleProto.BookMessage> = []
                    for oneValueBooks in jsonValueBooks {
                        let messageFromStringBooks = try BibleProto.BookMessage.Builder.decodeToBuilder(jsonMap:oneValueBooks).build()

                        jsonArrayBooks.append(messageFromStringBooks)
                    }
                    resultDecodedBuilder.books = jsonArrayBooks
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> BibleProto.BibleMessage.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try BibleProto.BibleMessage.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class BookMessage : GeneratedMessage {
        public typealias BuilderType = BibleProto.BookMessage.Builder

        public static func == (lhs: BibleProto.BookMessage, rhs: BibleProto.BookMessage) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
            fieldCheck = fieldCheck && (lhs.hasIndex == rhs.hasIndex) && (!lhs.hasIndex || lhs.index == rhs.index)
            fieldCheck = fieldCheck && (lhs.hasTitle == rhs.hasTitle) && (!lhs.hasTitle || lhs.title == rhs.title)
            fieldCheck = fieldCheck && (lhs.chapters == rhs.chapters)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var version:Int32! = nil
        public fileprivate(set) var hasVersion:Bool = false

        public fileprivate(set) var index:Int32! = nil
        public fileprivate(set) var hasIndex:Bool = false

        public fileprivate(set) var title:String! = nil
        public fileprivate(set) var hasTitle:Bool = false

        public fileprivate(set) var chapters:Array<BibleProto.ChapterMessage>  = Array<BibleProto.ChapterMessage>()
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            if !hasVersion {
                return false
            }
            var isInitChapters:Bool = true
            for oneElementChapters in chapters {
                if !oneElementChapters.isInitialized() {
                    isInitChapters = false
                    break 
                }
            }
            if !isInitChapters {
                return isInitChapters
            }
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasVersion {
                try codedOutputStream.writeInt32(fieldNumber: 1, value:version)
            }
            if hasIndex {
                try codedOutputStream.writeInt32(fieldNumber: 2, value:index)
            }
            if hasTitle {
                try codedOutputStream.writeString(fieldNumber: 3, value:title)
            }
            for oneElementChapters in chapters {
                  try codedOutputStream.writeMessage(fieldNumber: 4, value:oneElementChapters)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasVersion {
                serialize_size += version.computeInt32Size(fieldNumber: 1)
            }
            if hasIndex {
                serialize_size += index.computeInt32Size(fieldNumber: 2)
            }
            if hasTitle {
                serialize_size += title.computeStringSize(fieldNumber: 3)
            }
            for oneElementChapters in chapters {
                serialize_size += oneElementChapters.computeMessageSize(fieldNumber: 4)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> BibleProto.BookMessage.Builder {
            return BibleProto.BookMessage.classBuilder() as! BibleProto.BookMessage.Builder
        }
        public func getBuilder() -> BibleProto.BookMessage.Builder {
            return classBuilder() as! BibleProto.BookMessage.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return BibleProto.BookMessage.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return BibleProto.BookMessage.Builder()
        }
        public func toBuilder() throws -> BibleProto.BookMessage.Builder {
            return try BibleProto.BookMessage.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:BibleProto.BookMessage) throws -> BibleProto.BookMessage.Builder {
            return try BibleProto.BookMessage.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasVersion {
                jsonMap["version"] = Int(version)
            }
            if hasIndex {
                jsonMap["index"] = Int(index)
            }
            if hasTitle {
                jsonMap["title"] = title
            }
            if !chapters.isEmpty {
                var jsonArrayChapters:Array<Dictionary<String,Any>> = []
                for oneValueChapters in chapters {
                    let ecodedMessageChapters = try oneValueChapters.encode()
                    jsonArrayChapters.append(ecodedMessageChapters)
                }
                jsonMap["chapters"] = jsonArrayChapters
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> BibleProto.BookMessage {
            return try BibleProto.BookMessage.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> BibleProto.BookMessage {
            return try BibleProto.BookMessage.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasVersion {
                output += "\(indent) version: \(version) \n"
            }
            if hasIndex {
                output += "\(indent) index: \(index) \n"
            }
            if hasTitle {
                output += "\(indent) title: \(title) \n"
            }
            var chaptersElementIndex:Int = 0
            for oneElementChapters in chapters {
                output += "\(indent) chapters[\(chaptersElementIndex)] {\n"
                output += try oneElementChapters.getDescription(indent: "\(indent)  ")
                output += "\(indent)}\n"
                chaptersElementIndex += 1
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasVersion {
                    hashCode = (hashCode &* 31) &+ version.hashValue
                }
                if hasIndex {
                    hashCode = (hashCode &* 31) &+ index.hashValue
                }
                if hasTitle {
                    hashCode = (hashCode &* 31) &+ title.hashValue
                }
                for oneElementChapters in chapters {
                    hashCode = (hashCode &* 31) &+ oneElementChapters.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "BibleProto.BookMessage"
        }
        override public func className() -> String {
            return "BibleProto.BookMessage"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:BibleProto.BookMessage = BibleProto.BookMessage()
            public func getMessage() -> BibleProto.BookMessage {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var version:Int32 {
                get {
                    return builderResult.version
                }
                set (value) {
                    builderResult.hasVersion = true
                    builderResult.version = value
                }
            }
            public var hasVersion:Bool {
                get {
                    return builderResult.hasVersion
                }
            }
            @discardableResult
            public func setVersion(_ value:Int32) -> BibleProto.BookMessage.Builder {
                self.version = value
                return self
            }
            @discardableResult
            public func clearVersion() -> BibleProto.BookMessage.Builder{
                builderResult.hasVersion = false
                builderResult.version = nil
                return self
            }
            public var index:Int32 {
                get {
                    return builderResult.index
                }
                set (value) {
                    builderResult.hasIndex = true
                    builderResult.index = value
                }
            }
            public var hasIndex:Bool {
                get {
                    return builderResult.hasIndex
                }
            }
            @discardableResult
            public func setIndex(_ value:Int32) -> BibleProto.BookMessage.Builder {
                self.index = value
                return self
            }
            @discardableResult
            public func clearIndex() -> BibleProto.BookMessage.Builder{
                builderResult.hasIndex = false
                builderResult.index = nil
                return self
            }
            public var title:String {
                get {
                    return builderResult.title
                }
                set (value) {
                    builderResult.hasTitle = true
                    builderResult.title = value
                }
            }
            public var hasTitle:Bool {
                get {
                    return builderResult.hasTitle
                }
            }
            @discardableResult
            public func setTitle(_ value:String) -> BibleProto.BookMessage.Builder {
                self.title = value
                return self
            }
            @discardableResult
            public func clearTitle() -> BibleProto.BookMessage.Builder{
                builderResult.hasTitle = false
                builderResult.title = nil
                return self
            }
            public var chapters:Array<BibleProto.ChapterMessage> {
                get {
                    return builderResult.chapters
                }
                set (value) {
                    builderResult.chapters = value
                }
            }
            @discardableResult
            public func setChapters(_ value:Array<BibleProto.ChapterMessage>) -> BibleProto.BookMessage.Builder {
                self.chapters = value
                return self
            }
            @discardableResult
            public func clearChapters() -> BibleProto.BookMessage.Builder {
                builderResult.chapters.removeAll(keepingCapacity: false)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> BibleProto.BookMessage.Builder {
                builderResult = BibleProto.BookMessage()
                return self
            }
            override public func clone() throws -> BibleProto.BookMessage.Builder {
                return try BibleProto.BookMessage.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> BibleProto.BookMessage {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> BibleProto.BookMessage {
                let returnMe:BibleProto.BookMessage = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:BibleProto.BookMessage) throws -> BibleProto.BookMessage.Builder {
                if other == BibleProto.BookMessage() {
                    return self
                }
                if other.hasVersion {
                    version = other.version
                }
                if other.hasIndex {
                    index = other.index
                }
                if other.hasTitle {
                    title = other.title
                }
                if !other.chapters.isEmpty  {
                     builderResult.chapters += other.chapters
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> BibleProto.BookMessage.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> BibleProto.BookMessage.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        version = try codedInputStream.readInt32()

                    case 16:
                        index = try codedInputStream.readInt32()

                    case 26:
                        title = try codedInputStream.readString()

                    case 34:
                        let subBuilder = BibleProto.ChapterMessage.Builder()
                        try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                        chapters.append(subBuilder.buildPartial())

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> BibleProto.BookMessage.Builder {
                let resultDecodedBuilder = BibleProto.BookMessage.Builder()
                if let jsonValueVersion = jsonMap["version"] as? Int {
                    resultDecodedBuilder.version = Int32(jsonValueVersion)
                } else if let jsonValueVersion = jsonMap["version"] as? String {
                    resultDecodedBuilder.version = Int32(jsonValueVersion)!
                }
                if let jsonValueIndex = jsonMap["index"] as? Int {
                    resultDecodedBuilder.index = Int32(jsonValueIndex)
                } else if let jsonValueIndex = jsonMap["index"] as? String {
                    resultDecodedBuilder.index = Int32(jsonValueIndex)!
                }
                if let jsonValueTitle = jsonMap["title"] as? String {
                    resultDecodedBuilder.title = jsonValueTitle
                }
                if let jsonValueChapters = jsonMap["chapters"] as? Array<Dictionary<String,Any>> {
                    var jsonArrayChapters:Array<BibleProto.ChapterMessage> = []
                    for oneValueChapters in jsonValueChapters {
                        let messageFromStringChapters = try BibleProto.ChapterMessage.Builder.decodeToBuilder(jsonMap:oneValueChapters).build()

                        jsonArrayChapters.append(messageFromStringChapters)
                    }
                    resultDecodedBuilder.chapters = jsonArrayChapters
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> BibleProto.BookMessage.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try BibleProto.BookMessage.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class ChapterMessage : GeneratedMessage {
        public typealias BuilderType = BibleProto.ChapterMessage.Builder

        public static func == (lhs: BibleProto.ChapterMessage, rhs: BibleProto.ChapterMessage) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
            fieldCheck = fieldCheck && (lhs.hasNumber == rhs.hasNumber) && (!lhs.hasNumber || lhs.number == rhs.number)
            fieldCheck = fieldCheck && (lhs.verses == rhs.verses)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var version:Int32! = nil
        public fileprivate(set) var hasVersion:Bool = false

        public fileprivate(set) var number:Int32! = nil
        public fileprivate(set) var hasNumber:Bool = false

        public fileprivate(set) var verses:Array<BibleProto.VersMessage>  = Array<BibleProto.VersMessage>()
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            if !hasVersion {
                return false
            }
            var isInitVerses:Bool = true
            for oneElementVerses in verses {
                if !oneElementVerses.isInitialized() {
                    isInitVerses = false
                    break 
                }
            }
            if !isInitVerses {
                return isInitVerses
            }
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasVersion {
                try codedOutputStream.writeInt32(fieldNumber: 1, value:version)
            }
            if hasNumber {
                try codedOutputStream.writeInt32(fieldNumber: 2, value:number)
            }
            for oneElementVerses in verses {
                  try codedOutputStream.writeMessage(fieldNumber: 3, value:oneElementVerses)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasVersion {
                serialize_size += version.computeInt32Size(fieldNumber: 1)
            }
            if hasNumber {
                serialize_size += number.computeInt32Size(fieldNumber: 2)
            }
            for oneElementVerses in verses {
                serialize_size += oneElementVerses.computeMessageSize(fieldNumber: 3)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> BibleProto.ChapterMessage.Builder {
            return BibleProto.ChapterMessage.classBuilder() as! BibleProto.ChapterMessage.Builder
        }
        public func getBuilder() -> BibleProto.ChapterMessage.Builder {
            return classBuilder() as! BibleProto.ChapterMessage.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return BibleProto.ChapterMessage.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return BibleProto.ChapterMessage.Builder()
        }
        public func toBuilder() throws -> BibleProto.ChapterMessage.Builder {
            return try BibleProto.ChapterMessage.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:BibleProto.ChapterMessage) throws -> BibleProto.ChapterMessage.Builder {
            return try BibleProto.ChapterMessage.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasVersion {
                jsonMap["version"] = Int(version)
            }
            if hasNumber {
                jsonMap["number"] = Int(number)
            }
            if !verses.isEmpty {
                var jsonArrayVerses:Array<Dictionary<String,Any>> = []
                for oneValueVerses in verses {
                    let ecodedMessageVerses = try oneValueVerses.encode()
                    jsonArrayVerses.append(ecodedMessageVerses)
                }
                jsonMap["verses"] = jsonArrayVerses
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> BibleProto.ChapterMessage {
            return try BibleProto.ChapterMessage.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> BibleProto.ChapterMessage {
            return try BibleProto.ChapterMessage.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasVersion {
                output += "\(indent) version: \(version) \n"
            }
            if hasNumber {
                output += "\(indent) number: \(number) \n"
            }
            var versesElementIndex:Int = 0
            for oneElementVerses in verses {
                output += "\(indent) verses[\(versesElementIndex)] {\n"
                output += try oneElementVerses.getDescription(indent: "\(indent)  ")
                output += "\(indent)}\n"
                versesElementIndex += 1
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasVersion {
                    hashCode = (hashCode &* 31) &+ version.hashValue
                }
                if hasNumber {
                    hashCode = (hashCode &* 31) &+ number.hashValue
                }
                for oneElementVerses in verses {
                    hashCode = (hashCode &* 31) &+ oneElementVerses.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "BibleProto.ChapterMessage"
        }
        override public func className() -> String {
            return "BibleProto.ChapterMessage"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:BibleProto.ChapterMessage = BibleProto.ChapterMessage()
            public func getMessage() -> BibleProto.ChapterMessage {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var version:Int32 {
                get {
                    return builderResult.version
                }
                set (value) {
                    builderResult.hasVersion = true
                    builderResult.version = value
                }
            }
            public var hasVersion:Bool {
                get {
                    return builderResult.hasVersion
                }
            }
            @discardableResult
            public func setVersion(_ value:Int32) -> BibleProto.ChapterMessage.Builder {
                self.version = value
                return self
            }
            @discardableResult
            public func clearVersion() -> BibleProto.ChapterMessage.Builder{
                builderResult.hasVersion = false
                builderResult.version = nil
                return self
            }
            public var number:Int32 {
                get {
                    return builderResult.number
                }
                set (value) {
                    builderResult.hasNumber = true
                    builderResult.number = value
                }
            }
            public var hasNumber:Bool {
                get {
                    return builderResult.hasNumber
                }
            }
            @discardableResult
            public func setNumber(_ value:Int32) -> BibleProto.ChapterMessage.Builder {
                self.number = value
                return self
            }
            @discardableResult
            public func clearNumber() -> BibleProto.ChapterMessage.Builder{
                builderResult.hasNumber = false
                builderResult.number = nil
                return self
            }
            public var verses:Array<BibleProto.VersMessage> {
                get {
                    return builderResult.verses
                }
                set (value) {
                    builderResult.verses = value
                }
            }
            @discardableResult
            public func setVerses(_ value:Array<BibleProto.VersMessage>) -> BibleProto.ChapterMessage.Builder {
                self.verses = value
                return self
            }
            @discardableResult
            public func clearVerses() -> BibleProto.ChapterMessage.Builder {
                builderResult.verses.removeAll(keepingCapacity: false)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> BibleProto.ChapterMessage.Builder {
                builderResult = BibleProto.ChapterMessage()
                return self
            }
            override public func clone() throws -> BibleProto.ChapterMessage.Builder {
                return try BibleProto.ChapterMessage.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> BibleProto.ChapterMessage {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> BibleProto.ChapterMessage {
                let returnMe:BibleProto.ChapterMessage = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:BibleProto.ChapterMessage) throws -> BibleProto.ChapterMessage.Builder {
                if other == BibleProto.ChapterMessage() {
                    return self
                }
                if other.hasVersion {
                    version = other.version
                }
                if other.hasNumber {
                    number = other.number
                }
                if !other.verses.isEmpty  {
                     builderResult.verses += other.verses
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> BibleProto.ChapterMessage.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> BibleProto.ChapterMessage.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        version = try codedInputStream.readInt32()

                    case 16:
                        number = try codedInputStream.readInt32()

                    case 26:
                        let subBuilder = BibleProto.VersMessage.Builder()
                        try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                        verses.append(subBuilder.buildPartial())

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> BibleProto.ChapterMessage.Builder {
                let resultDecodedBuilder = BibleProto.ChapterMessage.Builder()
                if let jsonValueVersion = jsonMap["version"] as? Int {
                    resultDecodedBuilder.version = Int32(jsonValueVersion)
                } else if let jsonValueVersion = jsonMap["version"] as? String {
                    resultDecodedBuilder.version = Int32(jsonValueVersion)!
                }
                if let jsonValueNumber = jsonMap["number"] as? Int {
                    resultDecodedBuilder.number = Int32(jsonValueNumber)
                } else if let jsonValueNumber = jsonMap["number"] as? String {
                    resultDecodedBuilder.number = Int32(jsonValueNumber)!
                }
                if let jsonValueVerses = jsonMap["verses"] as? Array<Dictionary<String,Any>> {
                    var jsonArrayVerses:Array<BibleProto.VersMessage> = []
                    for oneValueVerses in jsonValueVerses {
                        let messageFromStringVerses = try BibleProto.VersMessage.Builder.decodeToBuilder(jsonMap:oneValueVerses).build()

                        jsonArrayVerses.append(messageFromStringVerses)
                    }
                    resultDecodedBuilder.verses = jsonArrayVerses
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> BibleProto.ChapterMessage.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try BibleProto.ChapterMessage.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    final public class VersMessage : GeneratedMessage {
        public typealias BuilderType = BibleProto.VersMessage.Builder

        public static func == (lhs: BibleProto.VersMessage, rhs: BibleProto.VersMessage) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
            fieldCheck = fieldCheck && (lhs.hasVnumber == rhs.hasVnumber) && (!lhs.hasVnumber || lhs.vnumber == rhs.vnumber)
            fieldCheck = fieldCheck && (lhs.hasText == rhs.hasText) && (!lhs.hasText || lhs.text == rhs.text)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }

        public fileprivate(set) var version:Int32! = nil
        public fileprivate(set) var hasVersion:Bool = false

        public fileprivate(set) var vnumber:Int32! = nil
        public fileprivate(set) var hasVnumber:Bool = false

        public fileprivate(set) var text:String! = nil
        public fileprivate(set) var hasText:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            if !hasVersion {
                return false
            }
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasVersion {
                try codedOutputStream.writeInt32(fieldNumber: 1, value:version)
            }
            if hasVnumber {
                try codedOutputStream.writeInt32(fieldNumber: 2, value:vnumber)
            }
            if hasText {
                try codedOutputStream.writeString(fieldNumber: 3, value:text)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasVersion {
                serialize_size += version.computeInt32Size(fieldNumber: 1)
            }
            if hasVnumber {
                serialize_size += vnumber.computeInt32Size(fieldNumber: 2)
            }
            if hasText {
                serialize_size += text.computeStringSize(fieldNumber: 3)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> BibleProto.VersMessage.Builder {
            return BibleProto.VersMessage.classBuilder() as! BibleProto.VersMessage.Builder
        }
        public func getBuilder() -> BibleProto.VersMessage.Builder {
            return classBuilder() as! BibleProto.VersMessage.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return BibleProto.VersMessage.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return BibleProto.VersMessage.Builder()
        }
        public func toBuilder() throws -> BibleProto.VersMessage.Builder {
            return try BibleProto.VersMessage.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:BibleProto.VersMessage) throws -> BibleProto.VersMessage.Builder {
            return try BibleProto.VersMessage.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasVersion {
                jsonMap["version"] = Int(version)
            }
            if hasVnumber {
                jsonMap["vnumber"] = Int(vnumber)
            }
            if hasText {
                jsonMap["text"] = text
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> BibleProto.VersMessage {
            return try BibleProto.VersMessage.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> BibleProto.VersMessage {
            return try BibleProto.VersMessage.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasVersion {
                output += "\(indent) version: \(version) \n"
            }
            if hasVnumber {
                output += "\(indent) vnumber: \(vnumber) \n"
            }
            if hasText {
                output += "\(indent) text: \(text) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasVersion {
                    hashCode = (hashCode &* 31) &+ version.hashValue
                }
                if hasVnumber {
                    hashCode = (hashCode &* 31) &+ vnumber.hashValue
                }
                if hasText {
                    hashCode = (hashCode &* 31) &+ text.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "BibleProto.VersMessage"
        }
        override public func className() -> String {
            return "BibleProto.VersMessage"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:BibleProto.VersMessage = BibleProto.VersMessage()
            public func getMessage() -> BibleProto.VersMessage {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var version:Int32 {
                get {
                    return builderResult.version
                }
                set (value) {
                    builderResult.hasVersion = true
                    builderResult.version = value
                }
            }
            public var hasVersion:Bool {
                get {
                    return builderResult.hasVersion
                }
            }
            @discardableResult
            public func setVersion(_ value:Int32) -> BibleProto.VersMessage.Builder {
                self.version = value
                return self
            }
            @discardableResult
            public func clearVersion() -> BibleProto.VersMessage.Builder{
                builderResult.hasVersion = false
                builderResult.version = nil
                return self
            }
            public var vnumber:Int32 {
                get {
                    return builderResult.vnumber
                }
                set (value) {
                    builderResult.hasVnumber = true
                    builderResult.vnumber = value
                }
            }
            public var hasVnumber:Bool {
                get {
                    return builderResult.hasVnumber
                }
            }
            @discardableResult
            public func setVnumber(_ value:Int32) -> BibleProto.VersMessage.Builder {
                self.vnumber = value
                return self
            }
            @discardableResult
            public func clearVnumber() -> BibleProto.VersMessage.Builder{
                builderResult.hasVnumber = false
                builderResult.vnumber = nil
                return self
            }
            public var text:String {
                get {
                    return builderResult.text
                }
                set (value) {
                    builderResult.hasText = true
                    builderResult.text = value
                }
            }
            public var hasText:Bool {
                get {
                    return builderResult.hasText
                }
            }
            @discardableResult
            public func setText(_ value:String) -> BibleProto.VersMessage.Builder {
                self.text = value
                return self
            }
            @discardableResult
            public func clearText() -> BibleProto.VersMessage.Builder{
                builderResult.hasText = false
                builderResult.text = nil
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> BibleProto.VersMessage.Builder {
                builderResult = BibleProto.VersMessage()
                return self
            }
            override public func clone() throws -> BibleProto.VersMessage.Builder {
                return try BibleProto.VersMessage.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> BibleProto.VersMessage {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> BibleProto.VersMessage {
                let returnMe:BibleProto.VersMessage = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:BibleProto.VersMessage) throws -> BibleProto.VersMessage.Builder {
                if other == BibleProto.VersMessage() {
                    return self
                }
                if other.hasVersion {
                    version = other.version
                }
                if other.hasVnumber {
                    vnumber = other.vnumber
                }
                if other.hasText {
                    text = other.text
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> BibleProto.VersMessage.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> BibleProto.VersMessage.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        version = try codedInputStream.readInt32()

                    case 16:
                        vnumber = try codedInputStream.readInt32()

                    case 26:
                        text = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> BibleProto.VersMessage.Builder {
                let resultDecodedBuilder = BibleProto.VersMessage.Builder()
                if let jsonValueVersion = jsonMap["version"] as? Int {
                    resultDecodedBuilder.version = Int32(jsonValueVersion)
                } else if let jsonValueVersion = jsonMap["version"] as? String {
                    resultDecodedBuilder.version = Int32(jsonValueVersion)!
                }
                if let jsonValueVnumber = jsonMap["vnumber"] as? Int {
                    resultDecodedBuilder.vnumber = Int32(jsonValueVnumber)
                } else if let jsonValueVnumber = jsonMap["vnumber"] as? String {
                    resultDecodedBuilder.vnumber = Int32(jsonValueVnumber)!
                }
                if let jsonValueText = jsonMap["text"] as? String {
                    resultDecodedBuilder.text = jsonValueText
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> BibleProto.VersMessage.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try BibleProto.VersMessage.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

}
extension BibleProto.BibleMessage: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<BibleProto.BibleMessage> {
        var mergedArray = Array<BibleProto.BibleMessage>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> BibleProto.BibleMessage? {
        return try BibleProto.BibleMessage.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> BibleProto.BibleMessage {
        return try BibleProto.BibleMessage.Builder().mergeFrom(data: data, extensionRegistry:BibleProto.BibleRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> BibleProto.BibleMessage {
        return try BibleProto.BibleMessage.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> BibleProto.BibleMessage {
        return try BibleProto.BibleMessage.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> BibleProto.BibleMessage {
        return try BibleProto.BibleMessage.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> BibleProto.BibleMessage {
        return try BibleProto.BibleMessage.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> BibleProto.BibleMessage {
        return try BibleProto.BibleMessage.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "version": return self.version
        case "books": return self.books
        default: return nil
        }
    }
}
extension BibleProto.BibleMessage.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = BibleProto.BibleMessage
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "version": return self.version
            case "books": return self.books
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "version":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.version = newSubscriptValue
            case "books":
                guard let newSubscriptValue = newSubscriptValue as? Array<BibleProto.BookMessage> else {
                    return
                }
                self.books = newSubscriptValue
            default: return
            }
        }
    }
}
extension BibleProto.BookMessage: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<BibleProto.BookMessage> {
        var mergedArray = Array<BibleProto.BookMessage>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> BibleProto.BookMessage? {
        return try BibleProto.BookMessage.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> BibleProto.BookMessage {
        return try BibleProto.BookMessage.Builder().mergeFrom(data: data, extensionRegistry:BibleProto.BibleRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> BibleProto.BookMessage {
        return try BibleProto.BookMessage.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> BibleProto.BookMessage {
        return try BibleProto.BookMessage.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> BibleProto.BookMessage {
        return try BibleProto.BookMessage.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> BibleProto.BookMessage {
        return try BibleProto.BookMessage.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> BibleProto.BookMessage {
        return try BibleProto.BookMessage.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "version": return self.version
        case "index": return self.index
        case "title": return self.title
        case "chapters": return self.chapters
        default: return nil
        }
    }
}
extension BibleProto.BookMessage.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = BibleProto.BookMessage
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "version": return self.version
            case "index": return self.index
            case "title": return self.title
            case "chapters": return self.chapters
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "version":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.version = newSubscriptValue
            case "index":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.index = newSubscriptValue
            case "title":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.title = newSubscriptValue
            case "chapters":
                guard let newSubscriptValue = newSubscriptValue as? Array<BibleProto.ChapterMessage> else {
                    return
                }
                self.chapters = newSubscriptValue
            default: return
            }
        }
    }
}
extension BibleProto.ChapterMessage: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<BibleProto.ChapterMessage> {
        var mergedArray = Array<BibleProto.ChapterMessage>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> BibleProto.ChapterMessage? {
        return try BibleProto.ChapterMessage.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> BibleProto.ChapterMessage {
        return try BibleProto.ChapterMessage.Builder().mergeFrom(data: data, extensionRegistry:BibleProto.BibleRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> BibleProto.ChapterMessage {
        return try BibleProto.ChapterMessage.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> BibleProto.ChapterMessage {
        return try BibleProto.ChapterMessage.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> BibleProto.ChapterMessage {
        return try BibleProto.ChapterMessage.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> BibleProto.ChapterMessage {
        return try BibleProto.ChapterMessage.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> BibleProto.ChapterMessage {
        return try BibleProto.ChapterMessage.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "version": return self.version
        case "number": return self.number
        case "verses": return self.verses
        default: return nil
        }
    }
}
extension BibleProto.ChapterMessage.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = BibleProto.ChapterMessage
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "version": return self.version
            case "number": return self.number
            case "verses": return self.verses
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "version":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.version = newSubscriptValue
            case "number":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.number = newSubscriptValue
            case "verses":
                guard let newSubscriptValue = newSubscriptValue as? Array<BibleProto.VersMessage> else {
                    return
                }
                self.verses = newSubscriptValue
            default: return
            }
        }
    }
}
extension BibleProto.VersMessage: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<BibleProto.VersMessage> {
        var mergedArray = Array<BibleProto.VersMessage>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> BibleProto.VersMessage? {
        return try BibleProto.VersMessage.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> BibleProto.VersMessage {
        return try BibleProto.VersMessage.Builder().mergeFrom(data: data, extensionRegistry:BibleProto.BibleRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> BibleProto.VersMessage {
        return try BibleProto.VersMessage.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> BibleProto.VersMessage {
        return try BibleProto.VersMessage.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> BibleProto.VersMessage {
        return try BibleProto.VersMessage.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> BibleProto.VersMessage {
        return try BibleProto.VersMessage.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> BibleProto.VersMessage {
        return try BibleProto.VersMessage.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "version": return self.version
        case "vnumber": return self.vnumber
        case "text": return self.text
        default: return nil
        }
    }
}
extension BibleProto.VersMessage.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = BibleProto.VersMessage
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "version": return self.version
            case "vnumber": return self.vnumber
            case "text": return self.text
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "version":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.version = newSubscriptValue
            case "vnumber":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.vnumber = newSubscriptValue
            case "text":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.text = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
