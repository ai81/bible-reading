/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: bible.proto
 *
 */

import Foundation
import SwiftProtobuf


struct Bible_BibleMessage: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Bible_BibleMessage"}
  public var protoMessageName: String {return "BibleMessage"}
  public var protoPackageName: String {return "Bible"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "version", json: "", swift: "version"),
    2: .unique(proto: "books", json: "", swift: "books"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  private var _version: Int32? = nil
  var version: Int32 {
    get {return _version ?? 0}
    set {_version = newValue}
  }
  public var hasVersion: Bool {
    return _version != nil
  }
  public mutating func clearVersion() {
    return _version = nil
  }

  var books: [Bible_BookMessage] = []

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_version)
    case 2: try setter.decodeRepeatedMessageField(fieldType: Bible_BookMessage.self, value: &books)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: _version ?? 0, protoFieldNumber: 1)
    if !books.isEmpty {
      try visitor.visitRepeatedMessageField(value: books, protoFieldNumber: 2)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Bible_BibleMessage) -> Bool {
    if (version != other.version) {return false}
    if books != other.books {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct Bible_BookMessage: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Bible_BookMessage"}
  public var protoMessageName: String {return "BookMessage"}
  public var protoPackageName: String {return "Bible"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "version", json: "", swift: "version"),
    2: .unique(proto: "index", json: "", swift: "index"),
    3: .unique(proto: "title", json: "", swift: "title"),
    4: .unique(proto: "chapters", json: "", swift: "chapters"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  private var _version: Int32? = nil
  var version: Int32 {
    get {return _version ?? 0}
    set {_version = newValue}
  }
  public var hasVersion: Bool {
    return _version != nil
  }
  public mutating func clearVersion() {
    return _version = nil
  }

  private var _index: Int32? = nil
  var index: Int32 {
    get {return _index ?? 0}
    set {_index = newValue}
  }
  public var hasIndex: Bool {
    return _index != nil
  }
  public mutating func clearIndex() {
    return _index = nil
  }

  private var _title: String? = nil
  var title: String {
    get {return _title ?? ""}
    set {_title = newValue}
  }
  public var hasTitle: Bool {
    return _title != nil
  }
  public mutating func clearTitle() {
    return _title = nil
  }

  var chapters: [Bible_ChapterMessage] = []

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_version)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_index)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_title)
    case 4: try setter.decodeRepeatedMessageField(fieldType: Bible_ChapterMessage.self, value: &chapters)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: _version ?? 0, protoFieldNumber: 1)
    if let v = _index {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 2)
    }
    if let v = _title {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, protoFieldNumber: 3)
    }
    if !chapters.isEmpty {
      try visitor.visitRepeatedMessageField(value: chapters, protoFieldNumber: 4)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Bible_BookMessage) -> Bool {
    if (version != other.version) {return false}
    if (index != other.index) {return false}
    if (title != other.title) {return false}
    if chapters != other.chapters {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct Bible_ChapterMessage: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Bible_ChapterMessage"}
  public var protoMessageName: String {return "ChapterMessage"}
  public var protoPackageName: String {return "Bible"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "version", json: "", swift: "version"),
    2: .unique(proto: "number", json: "", swift: "number"),
    3: .unique(proto: "verses", json: "", swift: "verses"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  private var _version: Int32? = nil
  var version: Int32 {
    get {return _version ?? 0}
    set {_version = newValue}
  }
  public var hasVersion: Bool {
    return _version != nil
  }
  public mutating func clearVersion() {
    return _version = nil
  }

  private var _number: Int32? = nil
  var number: Int32 {
    get {return _number ?? 0}
    set {_number = newValue}
  }
  public var hasNumber: Bool {
    return _number != nil
  }
  public mutating func clearNumber() {
    return _number = nil
  }

  var verses: [Bible_VersMessage] = []

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_version)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_number)
    case 3: try setter.decodeRepeatedMessageField(fieldType: Bible_VersMessage.self, value: &verses)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: _version ?? 0, protoFieldNumber: 1)
    if let v = _number {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 2)
    }
    if !verses.isEmpty {
      try visitor.visitRepeatedMessageField(value: verses, protoFieldNumber: 3)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Bible_ChapterMessage) -> Bool {
    if (version != other.version) {return false}
    if (number != other.number) {return false}
    if verses != other.verses {return false}
    if unknown != other.unknown {return false}
    return true
  }
}

struct Bible_VersMessage: SwiftProtobuf.Message, SwiftProtobuf.Proto2Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Bible_VersMessage"}
  public var protoMessageName: String {return "VersMessage"}
  public var protoPackageName: String {return "Bible"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "version", json: "", swift: "version"),
    2: .unique(proto: "vnumber", json: "", swift: "vnumber"),
    3: .unique(proto: "text", json: "", swift: "text"),
  ]

  public var unknown = SwiftProtobuf.UnknownStorage()

  private var _version: Int32? = nil
  var version: Int32 {
    get {return _version ?? 0}
    set {_version = newValue}
  }
  public var hasVersion: Bool {
    return _version != nil
  }
  public mutating func clearVersion() {
    return _version = nil
  }

  private var _vnumber: Int32? = nil
  var vnumber: Int32 {
    get {return _vnumber ?? 0}
    set {_vnumber = newValue}
  }
  public var hasVnumber: Bool {
    return _vnumber != nil
  }
  public mutating func clearVnumber() {
    return _vnumber = nil
  }

  private var _text: String? = nil
  var text: String {
    get {return _text ?? ""}
    set {_text = newValue}
  }
  public var hasText: Bool {
    return _text != nil
  }
  public mutating func clearText() {
    return _text = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_version)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &_vnumber)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_text)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: _version ?? 0, protoFieldNumber: 1)
    if let v = _vnumber {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: v, protoFieldNumber: 2)
    }
    if let v = _text {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: v, protoFieldNumber: 3)
    }
    unknown.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Bible_VersMessage) -> Bool {
    if (version != other.version) {return false}
    if (vnumber != other.vnumber) {return false}
    if (text != other.text) {return false}
    if unknown != other.unknown {return false}
    return true
  }
}
